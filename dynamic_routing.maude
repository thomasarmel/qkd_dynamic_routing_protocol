fmod SHAMIR_SECRETS is
    pr NAT .
    pr BOOL .
    pr STRING .

    sort SecretShare SecretShareSet .
    subsort SecretShare < SecretShareSet .
    op empty-SecretShareSet : -> SecretShareSet [ctor] .
    op __ : SecretShareSet SecretShareSet -> SecretShareSet [ctor assoc comm id: empty-SecretShareSet] .
    op secret-share : Nat String Nat -> SecretShare [ctor] .

    vars Sh Sh' : SecretShare .
    var Se : SecretShareSet .
    eq Sh Sh = Sh .

    op _in_ : SecretShare SecretShareSet -> Bool .

    eq Sh in empty-SecretShareSet = false .
    eq Sh in (Sh' Se) = (Sh == Sh') or (Sh in Se) .

    op delete : SecretShare SecretShareSet -> SecretShareSet .
    op card : SecretShareSet -> Nat .

    eq delete(Sh, empty-SecretShareSet) = empty-SecretShareSet .
    eq delete(Sh, Sh Se) = delete(Sh, Se) .
    eq delete(Sh, Se) = Se [owise] .

    eq card(empty-SecretShareSet) = 0 .
    eq card(Sh Se) = s card(delete(Sh, Se)) .

    --- nb shares, threshold, secret
    op get-shamir-shares : Nat Nat String -> SecretShareSet .

    vars NbShares ShareThreshold ShareThreshold' : Nat .
    var Secret : String .
    eq get-shamir-shares(0, ShareThreshold, Secret) = empty-SecretShareSet .
    eq get-shamir-shares(s NbShares, ShareThreshold, Secret) = secret-share(ShareThreshold, Secret, s NbShares) get-shamir-shares(NbShares, ShareThreshold, Secret) .
    
    op retrieve-shamir-secret : SecretShareSet -> String .

    vars NumShare : Nat .

    ceq retrieve-shamir-secret(secret-share(ShareThreshold, Secret, NumShare) Se) = Secret if s card(Se) >= ShareThreshold .
endfm


mod DYNAMIC_ROUTING is
    pr NAT .
    pr BOOL .

    sort NodeDesc NodeDescSet .
    subsort NodeDesc < NodeDescSet .
    op empty-node-desc-set : -> NodeDescSet [ctor] .
    op _;_ : NodeDescSet NodeDescSet -> NodeDescSet [ctor assoc comm id: empty-node-desc-set] .

    sort Neighbour NeighbourSet .
    subsort Neighbour < NeighbourSet .
    op empty-neighbour-set : -> NeighbourSet [ctor] .
    op _:_ : NeighbourSet NeighbourSet -> NeighbourSet [ctor assoc comm id: empty-neighbour-set] .

    sort NeighbourPossibleRouting NeighbourPossibleRoutingSet . --- To which node this neighbour can lead?
    subsort NeighbourPossibleRouting < NeighbourPossibleRoutingSet .
    op empty-neighbour-possible-routing-set : -> NeighbourPossibleRoutingSet [ctor] .
    op _+_ : NeighbourPossibleRoutingSet NeighbourPossibleRoutingSet -> NeighbourPossibleRoutingSet [ctor assoc comm id: empty-neighbour-possible-routing-set] .
    op _in_ : NeighbourPossibleRouting NeighbourPossibleRoutingSet -> Bool .

    op r : Nat -> NeighbourPossibleRouting [ctor] .
    op v : Nat NeighbourPossibleRoutingSet -> Neighbour [ctor] .
    op n : Nat NeighbourSet -> NodeDesc [ctor] .


    var N : NodeDesc .
    var NodeNumber : Nat .
    vars neighbourSet neighbourSet' : NeighbourSet .
    eq n(NodeNumber, neighbourSet) ; n(NodeNumber, neighbourSet') = n(NodeNumber, neighbourSet) .

    var V : Neighbour .
    var neighbourNumber : Nat .
    var neighbourPossibleRoutingSet neighbourPossibleRoutingSet' : NeighbourPossibleRoutingSet .
    eq v(neighbourNumber, neighbourPossibleRoutingSet) : v(neighbourNumber, neighbourPossibleRoutingSet') = v(neighbourNumber, neighbourPossibleRoutingSet) .

    vars NPR NPR' : NeighbourPossibleRouting .
    vars NPRS NPRS' : NeighbourPossibleRoutingSet .
    eq NPR + NPR = NPR .
    eq NPR in empty-neighbour-possible-routing-set = false .
    eq NPR in (NPRS + NPR') = (NPR == NPR') or NPR in NPRS .

    var NDS : NodeDescSet .
    vars X Y Z neighbourNode2 : Nat .
    vars NS NS' : NeighbourSet .

    --- Uncomment this equation and comment the rule below in order to reduce an initial state towards its normal final state: red initial .
    ---ceq NDS ; n(Y, NS' : v(neighbourNode2, NPRS' + r(Z))) ; n(X, NS : v(Y, NPRS))
    ---  = NDS ; n(Y, NS' : v(neighbourNode2, NPRS' + r(Z))) ; n(X, NS : v(Y, NPRS + r(Z))) if r(Z) in NPRS == false /\ Z =/= X /\ neighbourNode2 =/= X .

    crl [fetch-routes-rec] : NDS ; n(Y, NS' : v(neighbourNode2, NPRS' + r(Z))) ; n(X, NS : v(Y, NPRS))
                          => NDS ; n(Y, NS' : v(neighbourNode2, NPRS' + r(Z))) ; n(X, NS : v(Y, NPRS + r(Z))) if r(Z) in NPRS == false /\ Z =/= X /\ neighbourNode2 =/= X .


    --- Diamond
    op node1-initial : -> NodeDesc .
    eq node1-initial = n(1, v(2, r(2)) : v(3, r(3))) .
    op node2-initial : -> NodeDesc .
    eq node2-initial = n(2, v(1, r(1)) : v(4, r(4))) .
    op node3-initial : -> NodeDesc .
    eq node3-initial = n(3, v(1, r(1)) : v(4, r(4))) .
    op node4-initial : -> NodeDesc .
    eq node4-initial = n(4, v(2, r(2)) : v(3, r(3))) .
    op initial : -> NodeDescSet .
    eq initial = node1-initial ; node2-initial ; node3-initial ; node4-initial .

    op node1-final : -> NodeDesc .
    eq node1-final = n(1, v(2, r(2) + r(3) + r(4)) : v(3, r(2) + r(3) + r(4))) .
    op node2-final : -> NodeDesc .
    eq node2-final = n(2, v(1, r(1) + r(3) + r(4)) : v(4, r(1) + r(3) + r(4))) .
    op node3-final : -> NodeDesc .
    eq node3-final = n(3, v(1, r(1) + r(2) + r(4)) : v(4, r(1) + r(2) + r(4))) .
    op node4-final : -> NodeDesc .
    eq node4-final = n(4, v(2, r(1) + r(2) + r(3)) : v(3, r(1) + r(2) + r(3))) .
    op final : -> NodeDescSet .
    eq final = node1-final ; node2-final ; node3-final ; node4-final .

    --- why rewrite initial == final BUT search initial =>! final fail ??!


endm

--- Should answer "No solution."
search [1] n(1, v(2, r(2) ) : v(3, r(3) )) ; n(2, v(4, r(4))) ; n(3, v(4, r(4))) =>! n(1, v(2, r(2) + r(4)) : v(3, r(3))) ; n(2, v(4, r(4))) ; n(3, v(4, r(4))) .

--- Should find 1 solution
search [1] n(1, v(2, r(2) ) : v(3, r(3) )) ; n(2, v(4, r(4))) ; n(3, v(4, r(4))) =>! n(1, v(2, r(2) + r(4)) : v(3, r(3) + r(4))) ; n(2, v(4, r(4))) ; n(3, v(4, r(4))) .

--- Should find 1 solution
search [1] n(1, v(2, r(2))) ; n(2, v(1, r(1)) : v(4, r(4))) ; n(4, v(2, r(2))) =>! n(1, v(2, r(2) + r(4))) ; n(2, v(1, r(1)) : v(4, r(4))) ; n(4, v(2, r(1) + r(2))) .

--- Should find 1 solution
search [1] initial =>! n(1, v(2, r(2) + r(3) + r(4)) : v(3, r(2) + r(3) + r(4))) ; n(2, v(1, r(1) + r(3) + r(4)) : v(4, r(1) + r(3) + r(4))) ; n(3, v(1, r(1) + r(2) + r(4)) : v(4, r(1) + r(2) + r(4))) ; n(4, v(2, r(1) + r(2) + r(3)) : v(3, r(1) + r(2) + r(3))) .
rew final == n(1, v(2, r(2) + r(3) + r(4)) : v(3, r(2) + r(3) + r(4))) ; n(2, v(1, r(1) + r(3) + r(4)) : v(4, r(1) + r(3) + r(4))) ; n(3, v(1, r(1) + r(2) + r(4)) : v(4, r(1) + r(2) + r(4))) ; n(4, v(2, r(1) + r(2) + r(3)) : v(3, r(1) + r(2) + r(3))) .
--- quit .